import {
  C,
  L,
  O,
  P,
  S,
  g
} from "./chunk-NVZ5KZUO.js";
import {
  DndContext,
  DndProvider,
  useDrag,
  useDragLayer,
  useDrop
} from "./chunk-A5ZSV2AU.js";
import "./chunk-SQRZT7IF.js";
import "./chunk-HUQN4BNX.js";
import "./chunk-AHD7P767.js";
import "./chunk-QIVRHIXA.js";
import {
  require_react_dom
} from "./chunk-6ZDUWZXD.js";
import {
  require_react
} from "./chunk-LWCIAKPC.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/react-dnd-multi-backend/dist/index.js
var import_react4 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/react-dnd-preview/dist/index.js
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
var i = (t, e) => ({ x: t.x - e.x, y: t.y - e.y });
var a = (t) => {
  let e = t.getInitialClientOffset(), r = t.getInitialSourceClientOffset();
  return e === null || r === null ? { x: 0, y: 0 } : i(e, r);
};
var u = (t, e) => {
  let r = t.getClientOffset();
  if (r === null)
    return null;
  if (!e.current || !e.current.getBoundingClientRect)
    return i(r, a(t));
  let n = e.current.getBoundingClientRect(), o = { x: n.width / 2, y: n.height / 2 };
  return i(r, o);
};
var p = (t) => {
  let e = `translate(${t.x.toFixed(1)}px, ${t.y.toFixed(1)}px)`;
  return { pointerEvents: "none", position: "fixed", top: 0, left: 0, transform: e, WebkitTransform: e };
};
var l = () => {
  let t = (0, import_react2.useRef)(null), e = useDragLayer((r) => ({ currentOffset: u(r, t), isDragging: r.isDragging(), itemType: r.getItemType(), item: r.getItem(), monitor: r }));
  return !e.isDragging || e.currentOffset === null ? { display: false } : { display: true, itemType: e.itemType, item: e.item, style: p(e.currentOffset), monitor: e.monitor, ref: t };
};
var s = (0, import_react3.createContext)(void 0);
var x = (t) => {
  let e = l();
  if (!e.display)
    return null;
  let { display: r, ...n } = e, o;
  return "children" in t ? typeof t.children == "function" ? o = t.children(n) : o = t.children : o = t.generator(n), import_react.default.createElement(s.Provider, { value: n }, o);
};

// node_modules/react-dnd-multi-backend/dist/index.js
var import_react6 = __toESM(require_react());
var import_react7 = __toESM(require_react());
var u2 = (0, import_react4.createContext)(null);
var g2 = ({ portal: e, ...t }) => {
  let [r, o] = (0, import_react4.useState)(null);
  return import_react4.default.createElement(u2.Provider, { value: e ?? r }, import_react4.default.createElement(DndProvider, { backend: P, ...t }), e ? null : import_react4.default.createElement("div", { ref: o }));
};
var p2 = () => {
  let [e, t] = (0, import_react6.useState)(false), r = (0, import_react6.useContext)(DndContext);
  return (0, import_react6.useEffect)(() => {
    var _a;
    let o = (_a = r == null ? void 0 : r.dragDropManager) == null ? void 0 : _a.getBackend(), n = { backendChanged: (s2) => {
      t(s2.previewEnabled());
    } };
    return t(o.previewEnabled()), o.previewsList().register(n), () => {
      o.previewsList().unregister(n);
    };
  }, [r, r.dragDropManager]), e;
};
var E = (e) => {
  let t = p2(), r = (0, import_react5.useContext)(u2);
  if (!t)
    return null;
  let o = import_react5.default.createElement(x, { ...e });
  return r !== null ? (0, import_react_dom.createPortal)(o, r) : o;
};
E.Context = s;
var R = (e, t, r, o) => {
  let n = r.getBackend();
  r.receiveBackend(o);
  let s2 = t(e);
  return r.receiveBackend(n), s2;
};
var a2 = (e, t) => {
  var _a;
  let r = (0, import_react7.useContext)(DndContext), o = (_a = r == null ? void 0 : r.dragDropManager) == null ? void 0 : _a.getBackend();
  if (o === void 0)
    throw new Error("could not find backend, make sure you are using a <DndProvider />");
  let n = t(e), s2 = {}, d = o.backendsList();
  for (let c2 of d)
    s2[c2.id] = R(e, t, r.dragDropManager, c2.instance);
  return [n, s2];
};
var pe = (e) => a2(e, useDrag);
var le = (e) => a2(e, useDrop);
var Se = () => {
  let e = p2(), t = l();
  return e ? t : { display: false };
};
export {
  g2 as DndProvider,
  L as HTML5DragTransition,
  O as MouseTransition,
  P as MultiBackend,
  C as PointerTransition,
  E as Preview,
  s as PreviewContext,
  S as TouchTransition,
  g as createTransition,
  pe as useMultiDrag,
  le as useMultiDrop,
  Se as usePreview
};
//# sourceMappingURL=react-dnd-multi-backend.js.map
