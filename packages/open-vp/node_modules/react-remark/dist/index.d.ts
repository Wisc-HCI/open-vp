import { FunctionComponent, ReactElement, createElement } from 'react';
import { PluggableList } from 'unified';
import { RemarkParseOptions } from 'remark-parse';
import { Options as RemarkRehypeOptions } from 'mdast-util-to-hast';
import { Options as RehypeReactOptions } from 'rehype-react';
declare type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export interface UseRemarkSyncOptions {
    remarkParseOptions?: RemarkParseOptions;
    remarkToRehypeOptions?: RemarkRehypeOptions;
    rehypeReactOptions?: PartialBy<RehypeReactOptions<typeof createElement>, 'createElement'>;
    remarkPlugins?: PluggableList;
    rehypePlugins?: PluggableList;
}
export declare const useRemarkSync: (source: string, { remarkParseOptions, remarkToRehypeOptions, rehypeReactOptions, remarkPlugins, rehypePlugins, }?: UseRemarkOptions) => ReactElement;
export interface UseRemarkOptions extends UseRemarkSyncOptions {
    onError?: (err: Error) => void;
}
export declare const useRemark: ({ remarkParseOptions, remarkToRehypeOptions, rehypeReactOptions, remarkPlugins, rehypePlugins, onError, }?: UseRemarkOptions) => [ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | null, (source: string) => void];
export interface RemarkProps extends UseRemarkOptions {
    children: string;
}
export declare const Remark: FunctionComponent<RemarkProps>;
export {};
