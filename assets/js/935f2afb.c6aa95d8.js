"use strict";(self.webpackChunk_people_and_robots_open_vp_docs=self.webpackChunk_people_and_robots_open_vp_docs||[]).push([[8581],{35610:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Tutorial Intro","href":"/open-vp/docs/tutorial/intro","docId":"tutorial/intro","unlisted":false},{"type":"link","label":"Installation","href":"/open-vp/docs/tutorial/installation","docId":"tutorial/installation","unlisted":false},{"type":"link","label":"Empty Project","href":"/open-vp/docs/tutorial/empty-project","docId":"tutorial/empty-project","unlisted":false},{"type":"link","label":"First Block","href":"/open-vp/docs/tutorial/first-block","docId":"tutorial/first-block","unlisted":false},{"type":"link","label":"Second Block","href":"/open-vp/docs/tutorial/second-block","docId":"tutorial/second-block","unlisted":false},{"type":"link","label":"Drawers","href":"/open-vp/docs/tutorial/drawers","docId":"tutorial/drawers","unlisted":false},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Imperative Programming","href":"/open-vp/docs/tutorial/examples/imperative","docId":"tutorial/examples/imperative","unlisted":false},{"type":"link","label":"Flow-Based Programming","href":"/open-vp/docs/tutorial/examples/flow","docId":"tutorial/examples/flow","unlisted":false},{"type":"link","label":"Trigger-Based Programming","href":"/open-vp/docs/tutorial/examples/trigger","docId":"tutorial/examples/trigger","unlisted":false}],"href":"/open-vp/docs/category/examples"}],"apiSidebar":[{"type":"link","label":"API Intro","href":"/open-vp/docs/api/intro","docId":"api/intro","unlisted":false},{"type":"category","label":"Enums","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ClipboardAction","href":"/open-vp/docs/api/enums/clipboard-action","docId":"api/enums/clipboard-action","unlisted":false},{"type":"link","label":"ConnectionDirection","href":"/open-vp/docs/api/enums/connection-direction","docId":"api/enums/connection-direction","unlisted":false},{"type":"link","label":"ConnectionType","href":"/open-vp/docs/api/enums/connection-type","docId":"api/enums/connection-type","unlisted":false},{"type":"link","label":"DrawerType","href":"/open-vp/docs/api/enums/drawer-type","docId":"api/enums/drawer-type","unlisted":false},{"type":"link","label":"ExtraType","href":"/open-vp/docs/api/enums/extra-type","docId":"api/enums/extra-type","unlisted":false},{"type":"link","label":"MetaType","href":"/open-vp/docs/api/enums/meta-type","docId":"api/enums/meta-type","unlisted":false},{"type":"link","label":"PrimitiveType","href":"/open-vp/docs/api/enums/primitive-type","docId":"api/enums/primitive-type","unlisted":false},{"type":"link","label":"PropertyType","href":"/open-vp/docs/api/enums/property-type","docId":"api/enums/property-type","unlisted":false}],"href":"/open-vp/docs/category/enums"},{"type":"link","label":"BlockSpec","href":"/open-vp/docs/api/block-spec","docId":"api/block-spec","unlisted":false},{"type":"link","label":"DrawerSpec","href":"/open-vp/docs/api/drawer-spec","docId":"api/drawer-spec","unlisted":false},{"type":"link","label":"FieldInfo","href":"/open-vp/docs/api/field-info","docId":"api/field-info","unlisted":false},{"type":"link","label":"ProgramSpec","href":"/open-vp/docs/api/program-spec","docId":"api/program-spec","unlisted":false},{"type":"link","label":"TypeSpec","href":"/open-vp/docs/api/type-spec","docId":"api/type-spec","unlisted":false}]},"docs":{"api/block-spec":{"id":"api/block-spec","title":"BlockSpec","description":"<DocViewer","sidebar":"apiSidebar"},"api/drawer-spec":{"id":"api/drawer-spec","title":"DrawerSpec","description":"The DrawerSpec comes in two variants, the ObjectDrawerSpec and the ReferenceDrawerSpec. The ObjectDrawerSpec is used to specify a drawer that contains multiple different types of block instances, while the ReferenceDrawerSpec is used to provide draggable references to existing instances (or calls to existing functions) defined in the program.","sidebar":"apiSidebar"},"api/enums/clipboard-action":{"id":"api/enums/clipboard-action","title":"ClipboardAction","description":"","sidebar":"apiSidebar"},"api/enums/connection-direction":{"id":"api/enums/connection-direction","title":"ConnectionDirection","description":"","sidebar":"apiSidebar"},"api/enums/connection-type":{"id":"api/enums/connection-type","title":"ConnectionType","description":"","sidebar":"apiSidebar"},"api/enums/drawer-type":{"id":"api/enums/drawer-type","title":"DrawerType","description":"","sidebar":"apiSidebar"},"api/enums/extra-type":{"id":"api/enums/extra-type","title":"ExtraType","description":"","sidebar":"apiSidebar"},"api/enums/meta-type":{"id":"api/enums/meta-type","title":"MetaType","description":"","sidebar":"apiSidebar"},"api/enums/primitive-type":{"id":"api/enums/primitive-type","title":"PrimitiveType","description":"","sidebar":"apiSidebar"},"api/enums/property-type":{"id":"api/enums/property-type","title":"PropertyType","description":"","sidebar":"apiSidebar"},"api/field-info":{"id":"api/field-info","title":"FieldInfo","description":"There are multiple variants of FieldInfo. The most common is the BlockFieldInfo, which is used to specify a field that is a block. The other variants encode \\"Simple\\" fields, such as numbers, strings, booleans, and options.","sidebar":"apiSidebar"},"api/intro":{"id":"api/intro","title":"API Intro","description":"The API for OpenVPis built on Typescript, and as a specification, relies heavily on a nested configuration. The starting point is the ProgramSpec), which is a configuration for the entire program. It also uses a set of enum values mapping to strings (acccessible through the @peopleandrobots/core package) that provide a nice interface for specifying certain types of data structures.","sidebar":"apiSidebar"},"api/program-spec":{"id":"api/program-spec","title":"ProgramSpec","description":"<DocViewer rows=","sidebar":"apiSidebar"},"api/type-spec":{"id":"api/type-spec","title":"TypeSpec","description":"The TypeSpec comes in two variants, the ObjectTypeSpec and the FunctionTypeSpec. The ObjectTypeSpec is used to specify a type that behaves like an object, while the FunctionTypeSpec is used to specify a type that works as a function.","sidebar":"apiSidebar"},"tutorial/drawers":{"id":"tutorial/drawers","title":"Drawers","description":"To start dragging in blocks into the canvas, we will need a place to drag them from. That is where the drawer comes in. The drawer is located on the left-hand side of the environment, and organizes blocks based on a specification you provide. Let\'s use the previous blocks we created, and create some drawers for them.","sidebar":"tutorialSidebar"},"tutorial/empty-project":{"id":"tutorial/empty-project","title":"Empty Project","description":"The first step to using OpenVP is to import the Environment component and include it within your app, wherever it needs to go. By default, the Environment component will expand to fill the size of the parent element.","sidebar":"tutorialSidebar"},"tutorial/examples/flow":{"id":"tutorial/examples/flow","title":"Flow-Based Programming","description":"An example showing how to use the Environment to create a simple flow-based programming environment.","sidebar":"tutorialSidebar"},"tutorial/examples/imperative":{"id":"tutorial/examples/imperative","title":"Imperative Programming","description":"An example showing how to use the Environment to create a simple imperative programming environment.","sidebar":"tutorialSidebar"},"tutorial/examples/trigger":{"id":"tutorial/examples/trigger","title":"Trigger-Based Programming","description":"An example showing how to use the Environment to create a simple trigger-based programming environment.","sidebar":"tutorialSidebar"},"tutorial/first-block":{"id":"tutorial/first-block","title":"First Block","description":"Let\'s create our first block. Each block type in the OpenVP system follows a convention for specification. Individual blocks are generated according to the specifications of that block.","sidebar":"tutorialSidebar"},"tutorial/installation":{"id":"tutorial/installation","title":"Installation","description":"OpenVP can be installed via the node package manager (NPM) into an existing react project:","sidebar":"tutorialSidebar"},"tutorial/intro":{"id":"tutorial/intro","title":"Tutorial Intro","description":"Let\'s get you started with using OpenVP!","sidebar":"tutorialSidebar"},"tutorial/second-block":{"id":"tutorial/second-block","title":"Second Block","description":"Now that we have one block, let\'s create another that can be used in conjunction with the first. Specifically, we will create a simple block that can be dragged into the first block.","sidebar":"tutorialSidebar"}}}')}}]);